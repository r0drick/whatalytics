{"version":3,"sources":["tasks/MessagesPerMonth.tsx","utils/Message.ts","utils/Pair.ts","tasks/MessagesPerUser.tsx","utils/Parser.tsx","tasks/index.ts","App.tsx","serviceWorker.js","index.tsx"],"names":["Month","Message","content","author","date","Object","classCallCheck","this","Pair","first","second","_this","toString","concat","toList","MessagesPerUser","name","messages","message","match","length","react","es","data","labels","keys","datasets","label","values","map","value","backgroundColor","DateFormat","MessagesPerMonth","months","month","getMonth","key","Number","getTasks","Parser","tasks","arguments","undefined","dateFormat","Unknown","chat","foundFormat","findDateFormat","regex","exec","msg","parse","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","invoke","err","return","task","element","day","_match$1$split$map","split","str","_match$1$split$map2","slicedToArray","a","b","year","DayFirst","MonthFirst","Error","_match$2$split$map","substr","_match$2$split$map2","hour","minute","endsWith","Date","_match$1$split$map3","_match$1$split$map4","RegExp","App","possibleConstructorReturn","getPrototypeOf","call","handleUpload","bind","assertThisInitialized","parser","state","elements","e","file","_this2","target","files","Promise","res","rej","URIError","reader","FileReader","onloadend","readyState","DONE","result","readAsText","then","setState","run","fullpage","Fullpage","sectionsColor","destroy","moveTo","id","className","htmlFor","type","accept","onChange","style","display","React","Boolean","window","location","hostname","ReactDOM","App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a227f28a.chunk.js","sourcesContent":["import * as React from 'react'\r\nimport Task from './index'\r\nimport Message from '../utils/Message'\r\n\r\nenum Month {\r\n\t// noinspection JSUnusedGlobalSymbols\r\n\tJanuary,\r\n\tFebruary,\r\n\tMarch,\r\n\tApril,\r\n\tMay,\r\n\tJune,\r\n\tJuly,\r\n\tAugust,\r\n\tSeptember,\r\n\tOctober,\r\n\tNovember,\r\n\tDecember,\r\n}\r\n\r\nexport default class MessagesPerMonth implements Task {\r\n\treadonly name: string = 'Messages Per Month'\r\n\tprivate months: {[key: number]: number} = {}\r\n\r\n\tinvoke(message: Message): void {\r\n\t\tconst month = message.date.getMonth()\r\n\t\tif (typeof this.months[month] === 'undefined')\r\n\t\t\tthis.months[month] = 1\r\n\t\telse\r\n\t\t\tthis.months[month]++\r\n\t}\r\n\r\n\tget element(): JSX.Element {\r\n\t\treturn (<>\r\n\t\t\t<div key={this.name}>\r\n\t\t\t\t<h5>{this.name}</h5>\r\n\t\t\t\t{Object.keys(this.months).map(key => Number(key)).map(month => <>{Month[month]}: {this.months[month]}<br/></>)}\r\n\t\t\t</div>\r\n\t\t</>)\r\n\t}\r\n}","export default class Message {\r\n\tcontent: string\r\n\tauthor: string\r\n\tdate: Date\r\n\r\n\tconstructor(content: string, author: string, date: Date) {\r\n\t\tthis.content = content\r\n\t\tthis.author = author\r\n\t\tthis.date = date\r\n\t}\r\n}","export default class Pair<A, B> {\r\n\tfirst: A\r\n\tsecond: B\r\n\r\n\tconstructor(first: A, second: B) {\r\n\t\tthis.first = first\r\n\t\tthis.second = second\r\n\t}\r\n\r\n\ttoString = (): string => `Pair(${this.first}, ${this.second})`\r\n\ttoList = (): [A, B] => [this.first, this.second]\r\n}","import Task from '.'\r\nimport * as React from 'react'\r\nimport Message from '../utils/Message'\r\nimport Pair from '../utils/Pair'\r\nimport {HorizontalBar} from 'react-chartjs-2'\r\n\r\nexport default class MessagesPerUser implements Task {\r\n\treadonly name: string = 'Messages Per User'\r\n\tprivate messages: { [key: string]: Pair<number, number> } = {}\r\n\r\n\tget element(): JSX.Element {\r\n\t\treturn <HorizontalBar\r\n\t\t\t\tdata={{\r\n\t\t\t\t\tlabels: Object.keys(this.messages),\r\n\t\t\t\t\tdatasets: [{\r\n\t\t\t\t\t\tlabel: 'Messages',\r\n\t\t\t\t\t\tdata: Object.values(this.messages).map(value => value.first),\r\n\t\t\t\t\t\tbackgroundColor: '#81D4FA',\r\n\t\t\t\t\t}, {\r\n\t\t\t\t\t\tlabel: 'Words',\r\n\t\t\t\t\t\tdata: Object.values(this.messages).map(value => value.second),\r\n\t\t\t\t\t\tbackgroundColor: '#FFD54F',\r\n\t\t\t\t\t}],\r\n\t\t\t\t}}/>\r\n\t}\r\n\r\n\tinvoke(message: Message): void {\r\n\t\tif (typeof this.messages[message.author] === 'undefined')\r\n\t\t\tthis.messages[message.author] = new Pair(1, 0)\r\n\t\telse\r\n\t\t\tthis.messages[message.author].first++\r\n\r\n\t\tthis.messages[message.author].second += message.content.match(/\\S+/g)!.length || 0\r\n\t}\r\n}","import * as React from 'react'\r\nimport Message from './Message'\r\nimport Task, {getTasks} from '../tasks'\r\n\r\nenum DateFormat {\r\n\tMonthFirst,\r\n\tDayFirst,\r\n\tUnknown,\r\n}\r\n\r\nexport default class Parser {\r\n\tprivate static readonly regex = RegExp(/((?:\\d\\d?\\/?){3}), (\\d\\d?:\\d\\d(?: [A|P]M)?) - ([^:]*): ([\\s\\S]*?)(?=(?:\\d\\d?\\/?){3}, \\d\\d?:\\d\\d(?: [A|P]M)? - )/g)\r\n\ttasks: Task[]\r\n\tdateFormat: DateFormat\r\n\r\n\tconstructor(tasks: Task[] = getTasks(), dateFormat: DateFormat = DateFormat.Unknown) {\r\n\t\tthis.tasks = tasks\r\n\t\tthis.dateFormat = dateFormat\r\n\t}\r\n\r\n\trun(chat: string): JSX.Element[] {\r\n\t\tchat = chat + '0/0/0, 0:00 - '\r\n\r\n\t\tif (this.dateFormat === DateFormat.Unknown) {\r\n\t\t\tconst foundFormat = Parser.findDateFormat(chat)\r\n\t\t\tif (foundFormat === DateFormat.Unknown) {\r\n\t\t\t\t//TODO: do something if the format couldn't be found\r\n\t\t\t} else {\r\n\t\t\t\tthis.dateFormat = foundFormat\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet match: RegExpExecArray | null\r\n\t\twhile (match = Parser.regex.exec(chat)) {\r\n\t\t\tlet msg: Message = this.parse(match)\r\n\t\t\tfor (let task of this.tasks)\r\n\t\t\t\ttask.invoke(msg)\r\n\t\t}\r\n\r\n\t\treturn this.tasks.map(task => task.element)\r\n\t}\r\n\r\n\tprivate static findDateFormat(chat: string): DateFormat {\r\n\t\tlet match: RegExpExecArray | null\r\n\t\twhile (match = Parser.regex.exec(chat)) {\r\n\t\t\tlet [a, b] = match[1].split('/').map(str => Number(str))\r\n\t\t\tif (a > 12)\r\n\t\t\t\treturn DateFormat.DayFirst\r\n\t\t\telse if (b > 12)\r\n\t\t\t\treturn DateFormat.MonthFirst\r\n\t\t}\r\n\t\treturn DateFormat.Unknown\r\n\t}\r\n\r\n\tprivate parse(match: RegExpExecArray): Message {\r\n\t\tlet day, month\r\n\t\tlet [a, b, year] = match[1].split('/').map(str => Number(str))\r\n\t\tif (this.dateFormat === DateFormat.DayFirst) [day, month] = [a, b]\r\n\t\telse if (this.dateFormat === DateFormat.MonthFirst) [day, month] = [b, a]\r\n\t\telse throw new Error('Unknown Date format (Day first or Month first?)')\r\n\r\n\t\tlet [hour, minute] = match[2].split(':').map(str => Number(str.substr(0, 2)))\r\n\t\tif (match[2].endsWith('PM')) hour += 12 // Handle AM/PM time structure\r\n\r\n\t\treturn new Message(match[4], match[3], new Date(year, month - 1, day, hour, minute))\r\n\t}\r\n}","import Message from '../utils/Message'\r\n\r\nimport MessagesPerUser from './MessagesPerUser'\r\nimport MessagesPerMonth from './MessagesPerMonth'\r\n\r\nexport const getTasks = (): Task[] => [\r\n\tnew MessagesPerUser(),\r\n\tnew MessagesPerMonth(),\r\n]\r\n\r\nexport default interface Task {\r\n\treadonly name: string\r\n\r\n\tinvoke(message: Message): void\r\n\r\n\treadonly element: JSX.Element\r\n}","import * as React from 'react'\nimport './App.sass'\nimport Parser from './utils/Parser'\n// @ts-ignore\nimport Fullpage from 'fullpage.js'\n\nconst fileHandler = (file: File): Promise<string> => {\n\treturn new Promise<string>((res, rej) => {\n\t\tif (typeof file === 'undefined') rej(new URIError('No file uploaded'))\n\t\tconst reader = new FileReader()\n\t\treader.onloadend = () => {\n\t\t\tif (reader.readyState === FileReader.DONE)\n\t\t\t\tres(reader.result as string)\n\t\t}\n\t\treader.readAsText(file)\n\t})\n}\n\ntype AppState = {\n\telements: JSX.Element[]\n}\n\nexport default class App extends React.Component<{}, AppState> {\n\tfullpage: any\n\tparser: Parser\n\n\tconstructor() {\n\t\tsuper({})\n\t\tthis.handleUpload = this.handleUpload.bind(this)\n\t\tthis.parser = new Parser()\n\t\tthis.state = {\n\t\t\telements: [],\n\t\t}\n\t}\n\n\thandleUpload(e: React.ChangeEvent<HTMLInputElement>) {\n\t\tif (e.target.files!.length === 0) return\n\t\tfileHandler(e.target.files![0]).then(chat => {\n\t\t\tthis.setState({\n\t\t\t\telements: this.parser.run(chat),\n\t\t\t})\n\t\t})\n\t}\n\n\tcomponentDidMount() {\n\t\tthis.fullpage = new Fullpage('#page', {sectionsColor: ['f2f2f2']})\n\t}\n\n\tcomponentDidUpdate() {\n\t\tthis.fullpage.destroy()\n\t\tthis.fullpage = new Fullpage('#page', {sectionsColor: ['cccccc']})\n\t\tif (this.state.elements.length > 0)\n\t\t\tthis.fullpage.moveTo(2)\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t\t<div id='page'>\n\t\t\t\t\t<div className='section'>\n\t\t\t\t\t\t<span className='logo'>Whatalytics</span>\n\t\t\t\t\t\t<form>\n\t\t\t\t\t\t\t<label htmlFor='upload-dialog'>Upload a File</label>\n\t\t\t\t\t\t\t<input id='upload-dialog' type='file' accept='.txt' onChange={this.handleUpload}\n\t\t\t\t\t\t\t\t\t\t style={{display: 'none'}}/>\n\t\t\t\t\t\t</form>\n\t\t\t\t\t</div>\n\t\t\t\t\t{this.state.elements.length > 0 ? this.state.elements.map(element => <div\n\t\t\t\t\t\t\tclassName='section'>{element}</div>) : <></>}\n\t\t\t\t</div>\n\t\t)\n\t}\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as React from 'react'\nimport * as ReactDOM from 'react-dom'\nimport './index.sass'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App/>, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}