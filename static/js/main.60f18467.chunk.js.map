{"version":3,"sources":["utils/Message.ts","utils/Pair.ts","tasks/MessagesPerUser.tsx","tasks/WordsPerUser.tsx","tasks/index.ts","utils/Parser.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["Message","content","author","date","Object","classCallCheck","this","Pair","first","second","_this","toString","concat","toList","MessagesPerUser","name","messages","message","userArray","push","sort","a","b","react","key","map","pair","WordsPerUser","words","match","length","msgsArray","getTasks","Parser","chat","regex","RegExp","tasks","exec","msg","parse","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","value","invoke","err","return","elements","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","task","element","ReactDOM","document","querySelector","_match$1$split$map","split","str","Number","_match$1$split$map2","slicedToArray","year","month","day","_match$2$split$map","substr","_match$2$split$map2","hour","minute","endsWith","Date","fileHandler","file","Promise","res","rej","URIError","reader","FileReader","onloadend","e","target","readyState","DONE","result","readAsText","handleUpload","_ref","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","files","abrupt","sent","stop","_x","apply","arguments","App","className","type","accept","onChange","id","React","Boolean","window","location","hostname","App_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.60f18467.chunk.js","sourcesContent":["export default class Message {\r\n\tcontent: string\r\n\tauthor: string\r\n\tdate: Date\r\n\r\n\tconstructor(content: string, author: string, date: Date) {\r\n\t\tthis.content = content\r\n\t\tthis.author = author\r\n\t\tthis.date = date\r\n\t}\r\n}","export default class Pair<A, B> {\r\n\treadonly first: A\r\n\treadonly second: B\r\n\r\n\tconstructor(first: A, second: B) {\r\n\t\tthis.first = first\r\n\t\tthis.second = second\r\n\t}\r\n\r\n\ttoString = (): string => `Pair(${this.first}, ${this.second})`\r\n\ttoList = (): [A, B] => [this.first, this.second]\r\n}","import Task from '.'\r\nimport * as React from 'react'\r\nimport Message from '../utils/Message'\r\nimport Pair from '../utils/Pair'\r\n\r\nexport default class MessagesPerUser implements Task {\r\n\treadonly name: string = 'Messages Per User'\r\n\tprivate messages: { [key: string]: number } = {}\r\n\r\n\tinvoke(message: Message): void {\r\n\t\tif (typeof this.messages[message.author] === 'undefined')\r\n\t\t\tthis.messages[message.author] = 1\r\n\t\telse\r\n\t\t\tthis.messages[message.author]++\r\n\t}\r\n\r\n\tget element(): JSX.Element {\r\n\t\tlet userArray: Pair<string, number>[] = []\r\n\t\tfor (let author in this.messages)\r\n\t\t\tuserArray.push(new Pair<string, number>(author, this.messages[author]))\r\n\t\tuserArray.sort((a, b) => b.second - a.second)\r\n\r\n\t\treturn <div key={this.name}><h5>{this.name}</h5>{userArray.map(pair => <>{pair.first}: {pair.second}<br/></>)}</div>\r\n\t}\r\n}","import Task from '.'\r\nimport * as React from 'react'\r\nimport Message from '../utils/Message'\r\nimport Pair from '../utils/Pair'\r\n\r\nexport default class WordsPerUser implements Task {\r\n\treadonly name: string = 'Words Per User'\r\n\tprivate messages: { [key: string]: number } = {}\r\n\r\n\tinvoke(message: Message): void {\r\n\t\tconst words: number = message.content.match(/\\S+/g)!.length || 0\r\n\t\tif (typeof this.messages[message.author] === 'undefined')\r\n\t\t\tthis.messages[message.author] = words\r\n\t\telse\r\n\t\t\tthis.messages[message.author] += words\r\n\t}\r\n\r\n\tget element(): JSX.Element {\r\n\t\tlet msgsArray: Pair<string, number>[] = []\r\n\t\tfor (let author in this.messages)\r\n\t\t\tmsgsArray.push(new Pair<string, number>(author, this.messages[author]))\r\n\t\tmsgsArray.sort((a, b) => b.second - a.second)\r\n\r\n\t\treturn <div key={this.name}><h5>{this.name}</h5>{msgsArray.map(pair => <>{pair.first}: {pair.second}<br/></>)}</div>\r\n\t}\r\n}","import Message from '../utils/Message'\r\nimport MessagesPerUser from './MessagesPerUser'\r\nimport WordsPerUser from './WordsPerUser'\r\n\r\nexport const getTasks = (): Task[] => [\r\n\t\tnew MessagesPerUser(),\r\n\t\tnew WordsPerUser()\r\n]\r\n\r\nexport default interface Task {\r\n\treadonly name: string\r\n\r\n\tinvoke(message: Message): void\r\n\r\n\treadonly element: JSX.Element\r\n}","import * as React from 'react'\r\nimport Message from './Message'\r\nimport Task, {getTasks} from '../tasks'\r\nimport * as ReactDOM from 'react-dom'\r\n\r\nexport default class Parser {\r\n\tprivate readonly regex = RegExp(/((?:\\d\\d?\\/?){3}), (\\d\\d?:\\d\\d(?: [A|P]M)?) - ([^:]*): ([\\s\\S]*?)(?=(?:\\d\\d?\\/?){3}, \\d\\d?:\\d\\d(?: [A|P]M)? - )/g)\r\n\r\n\tconstructor(chat: string) {\r\n\t\tconst tasks: Task[] = getTasks()\r\n\r\n\t\tchat = chat + '00/00/00, 00:00 - '\r\n\t\tlet match: RegExpExecArray | null\r\n\t\twhile (match = this.regex.exec(chat)) {\r\n\t\t\tlet msg: Message = Parser.parse(match)\r\n\t\t\tfor (let task of tasks)\r\n\t\t\t\ttask.invoke(msg)\r\n\t\t}\r\n\r\n\t\tlet elements: JSX.Element[] = []\r\n\t\tfor (let task of tasks)\r\n\t\t\telements.push(task.element)\r\n\r\n\t\tReactDOM.render(<>{elements}</>, document.querySelector('#result'))\r\n\t}\r\n\r\n\tprivate static parse(match: RegExpExecArray): Message {\r\n\t\tlet [year, month, day] = match[1].split('/').map(str => Number(str))\r\n\t\tlet [hour, minute] = match[2].split(':').map(str => Number(str.substr(0, 2)))\r\n\t\tif (match[2].endsWith('PM')) hour += 12 // Handle AM/PM time structure\r\n\r\n\t\treturn new Message(match[4], match[3], new Date(year, month, day, hour, minute))\r\n\t}\r\n}","import * as React from 'react'\nimport './App.css'\nimport Parser from './utils/Parser'\n\nconst fileHandler = (file: File): Promise<Parser> => {\n\treturn new Promise<Parser>((res, rej) => {\n\t\tif (typeof file === 'undefined') rej(new URIError('No file uploaded'))\n\t\tconst reader = new FileReader()\n\t\treader.onloadend = (e: ProgressEvent) => {\n\t\t\tconst reader = e.target as FileReader\n\t\t\tif (reader.readyState === FileReader.DONE)\n\t\t\t\tres(new Parser(reader.result as string))\n\t\t}\n\t\treader.readAsText(file)\n\t})\n}\n\nconst handleUpload = async (e: React.ChangeEvent<HTMLInputElement>) => {\n\tif (e.target.files!.length === 0) return\n\tconst parser: Parser = await fileHandler(e.target.files![0])\n}\n\nexport default class App extends React.Component {\n\trender() {\n\t\treturn (\n\t\t\t\t<>\n\t\t\t\t\t<span className='logo'>Whatalytics</span>\n\t\t\t\t\t<input type='file' accept='.txt' onChange={handleUpload}/>\n\t\t\t\t\t<div id='result'/>\n\t\t\t\t</>\n\t\t)\n\t}\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as React from 'react'\nimport * as ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App/>, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}